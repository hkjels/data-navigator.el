#+title: data-navigator.el
#+subtitle: Navigate EDN/JSON data structures

* Installation

  data-navigator is not on MELPA yet, but in recent (29+) Emacs versions you can install it using

  #+BEGIN_SRC emacs-lisp
    (use-package data-navigator
      :init
      (unless (package-installed-p 'data-navigator)
        (package-vc-install
         '(data-navigator
           :vc-backend Git
           :url "https://github.com/hkjels/data-navigator.el/"
           :branch "main"))))
  #+END_SRC

  otherwise, you can use something like Quelpa
  #+BEGIN_SRC emacs-lisp
    (use-package data-navigator
      :defer t
      :quelpa
      (data-navigator :fetcher github :repo "hkjels/data-navigator.el")
      :config
      ;; if you want to use tap WebSocket server
      (require 'data-navigator-tap))
  #+END_SRC

  Elpaca or Straight.

* Usage

*To load data from a file:*
M-x ~data-navigator-from-file~ RET =path/to/file.edn=

*To load data from a string:*
~(data-navigator-from-input "[:line-bottom {:bar \"baz\"}]")~
~(data-navigator-from-input "{\"foo\": [1, 2, 3]}")~

*To start an empty navigator and then feed data later:*
~M-x data-navigator~

*After loading, use the following keys to navigate:*
- <return> or <right>: Dive into the selected value if itâ€™s not a leaf(data-navigator-enter).
- <backspace> or <left>: Go up one level (data-navigator-up).
- C-f: Apply a filter term to narrow down displayed entries (data-navigator-filter).
- X: Clear the data-navigator buffer (data-navigator-clear-buffer).
- w: Copy the current value to the kill-ring (data-navigator-copy-value).
- o/O: Open the value in a new buffer (data-navigator-open-value/data-navigator-open-value-other-window).
- F: Load data from a file (data-navigator-from-file).
- I: Load data from a string input (data-navigator-from-input).

Click with mouse-1 on keys/values or breadcrumbs to navigate.


** tap> to the navigator

Start tap WebSocket server using ~data-navigator-tap.el~

#+begin_src emacs-lisp
  (require 'data-navigator-tap)

  (data-navigator-tap-mode t)
  ;; or just use M-x data-navigator-tap-mode
#+end_src

By default tap WebSocket server listens on port 8081, but you can customize it with defcustom ~data-navigator-tap-server-port~.

Note that the ~websocket~ library is not part of the native Emacs distribution.


Now you can use ~add-tap~ to register a handler that sends data from Clojure, Babashka or ClojureScript to Emacs. E.g:
#+begin_src clojure
  (ns user
    #?(:bb  (:require [babashka.http-client.websocket :as ws])
       :clj (:require [gniazdo.core :as g])))

  (defn- connect [uri]
    #?(:bb   (ws/websocket {:uri uri})
       :clj  (g/connect uri)
       :cljs (js/WebSocket. uri)))

  (defn- send-msg [ws msg]
    #?(:bb   (ws/send! ws msg)
       :clj  (g/send-msg ws msg)
       :cljs (.send ws msg)))

  (def ^:private ws
    (connect "ws://localhost:8081"))

  (defn- ->emacs [data]
    (send-msg ws (pr-str data)))

  (add-tap ->emacs)

  (comment
    (tap> {:some {:test ["data"]}})
    )
#+end_src
